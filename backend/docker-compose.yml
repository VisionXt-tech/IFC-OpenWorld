# Docker Compose for IFC-OpenWorld Backend Development
# PostgreSQL 15 + PostGIS 3.4 + MinIO (S3-compatible)

version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.4-alpine
    container_name: ifc-openworld-db
    environment:
      POSTGRES_DB: ifc_openworld
      POSTGRES_USER: ifc_user
      POSTGRES_PASSWORD: ifc_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --auth=trust --auth-host=trust"
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"  # Mapped to 5433 to avoid conflict with local PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ifc_user -d ifc_openworld"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ifc-network

  minio:
    image: minio/minio:latest
    container_name: ifc-openworld-s3
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_API_CORS_ALLOW_ORIGIN: "http://localhost:5173"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ifc-network

  # MinIO client to create bucket on startup
  minio-init:
    image: minio/mc:latest
    container_name: ifc-openworld-s3-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/ifc-raw --ignore-existing;
      /usr/bin/mc mb myminio/ifc-processed --ignore-existing;
      exit 0;
      "
    networks:
      - ifc-network

  redis:
    image: redis:7-alpine
    container_name: ifc-openworld-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ifc-network

  clamav:
    image: clamav/clamav:latest
    container_name: ifc-openworld-clamav
    ports:
      - "3310:3310"
    volumes:
      - clamav_data:/var/lib/clamav
    environment:
      - CLAMAV_NO_FRESHCLAM=false
    healthcheck:
      test: ["CMD", "/usr/local/bin/clamdcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - ifc-network

  ifc-processor:
    build:
      context: ../ifc-processor
      dockerfile: Dockerfile
    container_name: ifc-openworld-processor
    depends_on:
      - postgres
      - redis
      - minio
    environment:
      DATABASE_URL: "postgresql://ifc_user:ifc_password@postgres:5432/ifc_openworld"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
      S3_ENDPOINT: "http://minio:9000"
      S3_BUCKET: "ifc-raw"
      S3_ACCESS_KEY_ID: "minioadmin"
      S3_SECRET_ACCESS_KEY: "minioadmin"
      S3_REGION: "us-east-1"
      LOG_LEVEL: "INFO"
      PYTHONUNBUFFERED: "1"
    volumes:
      - ../ifc-processor/app:/app/app  # Hot reload for development
    networks:
      - ifc-network
    restart: unless-stopped

volumes:
  postgres_data:
    name: ifc-openworld-postgres-data
  minio_data:
    name: ifc-openworld-minio-data
  redis_data:
    name: ifc-openworld-redis-data
  clamav_data:
    name: ifc-openworld-clamav-data

networks:
  ifc-network:
    name: ifc-openworld-network
    driver: bridge