"""
Unit tests for Malware Scanner Service
"""

import pytest
from unittest.mock import Mock, patch, MagicMock
from pathlib import Path
from app.services.malware_scanner import MalwareScanner, scan_ifc_file


class TestMalwareScanner:
    """Test MalwareScanner class"""

    def test_init(self):
        """Test scanner initialization"""
        scanner = MalwareScanner(host="test-host", port=3310)
        assert scanner.host == "test-host"
        assert scanner.port == 3310
        assert scanner._client is None

    @patch("app.services.malware_scanner.clamd.ClamdNetworkSocket")
    def test_connect_success(self, mock_clamd):
        """Test successful connection to ClamAV"""
        mock_client = Mock()
        mock_client.ping.return_value = True
        mock_clamd.return_value = mock_client

        scanner = MalwareScanner()
        result = scanner.connect()

        assert result is True
        assert scanner._client is not None
        mock_clamd.assert_called_once_with(host="localhost", port=3310)
        mock_client.ping.assert_called_once()

    @patch("app.services.malware_scanner.clamd.ClamdNetworkSocket")
    def test_connect_failure(self, mock_clamd):
        """Test failed connection to ClamAV"""
        mock_clamd.side_effect = Exception("Connection refused")

        scanner = MalwareScanner()
        result = scanner.connect()

        assert result is False
        assert scanner._client is None

    def test_scan_file_not_connected(self):
        """Test scanning without connection raises error"""
        scanner = MalwareScanner()

        with pytest.raises(RuntimeError, match="Not connected to ClamAV daemon"):
            scanner.scan_file("/path/to/file.ifc")

    @patch("app.services.malware_scanner.Path")
    def test_scan_file_not_found(self, mock_path):
        """Test scanning non-existent file raises error"""
        mock_path_obj = Mock()
        mock_path_obj.exists.return_value = False
        mock_path.return_value = mock_path_obj

        scanner = MalwareScanner()
        scanner._client = Mock()

        with pytest.raises(FileNotFoundError):
            scanner.scan_file("/path/to/nonexistent.ifc")

    @patch("app.services.malware_scanner.Path")
    def test_scan_file_clean(self, mock_path):
        """Test scanning clean file"""
        mock_path_obj = Mock()
        mock_path_obj.exists.return_value = True
        mock_path.return_value = mock_path_obj

        mock_client = Mock()
        mock_client.scan.return_value = None  # Clean file returns None

        scanner = MalwareScanner()
        scanner._client = mock_client

        result = scanner.scan_file("/path/to/clean.ifc")

        assert result["is_infected"] is False
        assert result["virus_name"] is None
        assert result["scan_result"] == "CLEAN"
        assert result["error"] is None

    @patch("app.services.malware_scanner.Path")
    def test_scan_file_infected(self, mock_path):
        """Test scanning infected file"""
        mock_path_obj = Mock()
        mock_path_obj.exists.return_value = True
        mock_path.return_value = mock_path_obj

        file_path = "/path/to/infected.ifc"
        mock_client = Mock()
        mock_client.scan.return_value = {
            file_path: ("FOUND", "Eicar-Test-Signature")
        }

        scanner = MalwareScanner()
        scanner._client = mock_client

        result = scanner.scan_file(file_path)

        assert result["is_infected"] is True
        assert result["virus_name"] == "Eicar-Test-Signature"
        assert result["scan_result"] == "INFECTED"
        assert result["error"] is None

    @patch("app.services.malware_scanner.Path")
    def test_scan_file_ok_status(self, mock_path):
        """Test scanning file with OK status"""
        mock_path_obj = Mock()
        mock_path_obj.exists.return_value = True
        mock_path.return_value = mock_path_obj

        file_path = "/path/to/file.ifc"
        mock_client = Mock()
        mock_client.scan.return_value = {
            file_path: ("OK", None)
        }

        scanner = MalwareScanner()
        scanner._client = mock_client

        result = scanner.scan_file(file_path)

        assert result["is_infected"] is False
        assert result["virus_name"] is None
        assert result["scan_result"] == "OK"
        assert result["error"] is None

    @patch("app.services.malware_scanner.Path")
    def test_scan_file_buffer_too_long(self, mock_path):
        """Test scanning file that's too large"""
        import clamd

        mock_path_obj = Mock()
        mock_path_obj.exists.return_value = True
        mock_path.return_value = mock_path_obj

        mock_client = Mock()
        mock_client.scan.side_effect = clamd.BufferTooLongError("File too large")

        scanner = MalwareScanner()
        scanner._client = mock_client

        result = scanner.scan_file("/path/to/large.ifc")

        assert result["is_infected"] is False
        assert result["virus_name"] is None
        assert result["scan_result"] == "ERROR"
        assert "too large" in result["error"]

    @patch("app.services.malware_scanner.Path")
    def test_scan_file_exception(self, mock_path):
        """Test scanning with unexpected exception"""
        mock_path_obj = Mock()
        mock_path_obj.exists.return_value = True
        mock_path.return_value = mock_path_obj

        mock_client = Mock()
        mock_client.scan.side_effect = Exception("Unexpected error")

        scanner = MalwareScanner()
        scanner._client = mock_client

        result = scanner.scan_file("/path/to/file.ifc")

        assert result["is_infected"] is False
        assert result["virus_name"] is None
        assert result["scan_result"] == "ERROR"
        assert "Unexpected error" in result["error"]

    def test_get_version_not_connected(self):
        """Test getting version without connection"""
        scanner = MalwareScanner()

        result = scanner.get_version()

        assert result is None

    def test_get_version_success(self):
        """Test getting ClamAV version"""
        mock_client = Mock()
        mock_client.version.return_value = "ClamAV 1.0.0"

        scanner = MalwareScanner()
        scanner._client = mock_client

        result = scanner.get_version()

        assert result == "ClamAV 1.0.0"
        mock_client.version.assert_called_once()

    def test_get_version_failure(self):
        """Test getting version with error"""
        mock_client = Mock()
        mock_client.version.side_effect = Exception("Connection error")

        scanner = MalwareScanner()
        scanner._client = mock_client

        result = scanner.get_version()

        assert result is None

    def test_reload_virus_db_not_connected(self):
        """Test reloading virus DB without connection"""
        scanner = MalwareScanner()

        result = scanner.reload_virus_db()

        assert result is False

    def test_reload_virus_db_success(self):
        """Test reloading virus database"""
        mock_client = Mock()
        mock_client.reload.return_value = True

        scanner = MalwareScanner()
        scanner._client = mock_client

        result = scanner.reload_virus_db()

        assert result is True
        mock_client.reload.assert_called_once()

    def test_reload_virus_db_failure(self):
        """Test reloading virus DB with error"""
        mock_client = Mock()
        mock_client.reload.side_effect = Exception("Reload failed")

        scanner = MalwareScanner()
        scanner._client = mock_client

        result = scanner.reload_virus_db()

        assert result is False


class TestScanIFCFile:
    """Test scan_ifc_file convenience function"""

    @patch("app.services.malware_scanner.MalwareScanner")
    def test_scan_ifc_file_success(self, MockScanner):
        """Test successful IFC file scanning"""
        mock_scanner = Mock()
        mock_scanner.connect.return_value = True
        mock_scanner.scan_file.return_value = {
            "is_infected": False,
            "virus_name": None,
            "scan_result": "CLEAN",
            "error": None,
        }

        MockScanner.return_value = mock_scanner

        result = scan_ifc_file("/path/to/file.ifc", clamav_host="test-host", clamav_port=3310)

        assert result["is_infected"] is False
        assert result["scan_result"] == "CLEAN"
        MockScanner.assert_called_once_with(host="test-host", port=3310)
        mock_scanner.connect.assert_called_once()
        mock_scanner.scan_file.assert_called_once_with("/path/to/file.ifc")

    @patch("app.services.malware_scanner.MalwareScanner")
    def test_scan_ifc_file_connection_failure(self, MockScanner):
        """Test scanning with connection failure"""
        mock_scanner = Mock()
        mock_scanner.connect.return_value = False

        MockScanner.return_value = mock_scanner

        with pytest.raises(RuntimeError, match="Failed to connect to ClamAV daemon"):
            scan_ifc_file("/path/to/file.ifc")

    @patch("app.services.malware_scanner.MalwareScanner")
    def test_scan_ifc_file_infected(self, MockScanner):
        """Test scanning infected file"""
        mock_scanner = Mock()
        mock_scanner.connect.return_value = True
        mock_scanner.scan_file.return_value = {
            "is_infected": True,
            "virus_name": "Test.Virus",
            "scan_result": "INFECTED",
            "error": None,
        }

        MockScanner.return_value = mock_scanner

        result = scan_ifc_file("/path/to/infected.ifc")

        assert result["is_infected"] is True
        assert result["virus_name"] == "Test.Virus"
        assert result["scan_result"] == "INFECTED"
