"""
Malware Scanner Service - ClamAV integration for IFC file scanning
"""

import clamd
import logging
from typing import Dict, Any, Optional
from pathlib import Path

logger = logging.getLogger(__name__)


class MalwareScanner:
    """ClamAV-based malware scanner for IFC files"""

    def __init__(self, host: str = "localhost", port: int = 3310):
        """
        Initialize ClamAV scanner

        Args:
            host: ClamAV daemon host
            port: ClamAV daemon port (default 3310)
        """
        self.host = host
        self.port = port
        self._client: Optional[clamd.ClamdNetworkSocket] = None

    def connect(self) -> bool:
        """
        Connect to ClamAV daemon

        Returns:
            True if connection successful, False otherwise
        """
        try:
            self._client = clamd.ClamdNetworkSocket(host=self.host, port=self.port)
            # Test connection
            self._client.ping()
            logger.info(f"Connected to ClamAV daemon at {self.host}:{self.port}")
            return True
        except Exception as e:
            logger.error(f"Failed to connect to ClamAV daemon: {e}")
            self._client = None
            return False

    def scan_file(self, file_path: str) -> Dict[str, Any]:
        """
        Scan a file for malware

        Args:
            file_path: Path to file to scan

        Returns:
            Dictionary with scan results:
            {
                "is_infected": bool,
                "virus_name": str | None,
                "scan_result": str,
                "error": str | None
            }

        Raises:
            RuntimeError: If not connected to ClamAV daemon
            FileNotFoundError: If file doesn't exist
        """
        if not self._client:
            raise RuntimeError("Not connected to ClamAV daemon. Call connect() first.")

        file_path_obj = Path(file_path)
        if not file_path_obj.exists():
            raise FileNotFoundError(f"File not found: {file_path}")

        try:
            logger.info(f"Scanning file for malware: {file_path}")
            result = self._client.scan(file_path)

            # ClamAV returns dict: {file_path: ('FOUND' | 'OK', virus_name | None)}
            if result is None or file_path not in result:
                # No result means file is clean
                logger.info(f"File scan complete: CLEAN - {file_path}")
                return {
                    "is_infected": False,
                    "virus_name": None,
                    "scan_result": "CLEAN",
                    "error": None,
                }

            status, virus_name = result[file_path]

            if status == "FOUND":
                logger.warning(f"Malware detected in {file_path}: {virus_name}")
                return {
                    "is_infected": True,
                    "virus_name": virus_name,
                    "scan_result": "INFECTED",
                    "error": None,
                }
            else:
                logger.info(f"File scan complete: {status} - {file_path}")
                return {
                    "is_infected": False,
                    "virus_name": None,
                    "scan_result": status,
                    "error": None,
                }

        except clamd.BufferTooLongError:
            error = "File too large for scanning"
            logger.error(f"Scan failed: {error}")
            return {
                "is_infected": False,
                "virus_name": None,
                "scan_result": "ERROR",
                "error": error,
            }
        except Exception as e:
            error = f"Scan failed: {str(e)}"
            logger.error(error)
            return {
                "is_infected": False,
                "virus_name": None,
                "scan_result": "ERROR",
                "error": error,
            }

    def get_version(self) -> Optional[str]:
        """
        Get ClamAV version

        Returns:
            ClamAV version string or None if not connected
        """
        if not self._client:
            return None

        try:
            return self._client.version()
        except Exception as e:
            logger.error(f"Failed to get ClamAV version: {e}")
            return None

    def reload_virus_db(self) -> bool:
        """
        Reload virus database

        Returns:
            True if reload successful, False otherwise
        """
        if not self._client:
            return False

        try:
            self._client.reload()
            logger.info("ClamAV virus database reloaded")
            return True
        except Exception as e:
            logger.error(f"Failed to reload virus database: {e}")
            return False


def scan_ifc_file(file_path: str, clamav_host: str = "localhost", clamav_port: int = 3310) -> Dict[str, Any]:
    """
    Convenience function to scan an IFC file for malware

    Args:
        file_path: Path to IFC file
        clamav_host: ClamAV daemon host
        clamav_port: ClamAV daemon port

    Returns:
        Scan result dictionary

    Raises:
        RuntimeError: If ClamAV connection fails
        FileNotFoundError: If file doesn't exist
    """
    scanner = MalwareScanner(host=clamav_host, port=clamav_port)

    if not scanner.connect():
        raise RuntimeError(f"Failed to connect to ClamAV daemon at {clamav_host}:{clamav_port}")

    return scanner.scan_file(file_path)
