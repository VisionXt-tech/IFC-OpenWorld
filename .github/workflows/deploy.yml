name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual deployment

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ifc-openworld-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/ifc-openworld-backend:${{ steps.meta.outputs.sha_short }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push IFC processor image
        uses: docker/build-push-action@v5
        with:
          context: ./ifc-processor
          file: ./ifc-processor/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ifc-openworld-processor:latest
            ${{ secrets.DOCKER_USERNAME }}/ifc-openworld-processor:${{ steps.meta.outputs.sha_short }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ifc-openworld-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/ifc-openworld-frontend:${{ steps.meta.outputs.sha_short }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_CESIUM_ION_TOKEN=${{ secrets.VITE_CESIUM_ION_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.meta.outputs.timestamp }}
          release_name: Release ${{ steps.meta.outputs.timestamp }}
          body: |
            ## Deployment Info
            - Commit: ${{ github.sha }}
            - Short SHA: ${{ steps.meta.outputs.sha_short }}
            - Timestamp: ${{ steps.meta.outputs.timestamp }}

            ## Docker Images
            - Backend: `${{ secrets.DOCKER_USERNAME }}/ifc-openworld-backend:${{ steps.meta.outputs.sha_short }}`
            - IFC Processor: `${{ secrets.DOCKER_USERNAME }}/ifc-openworld-processor:${{ steps.meta.outputs.sha_short }}`
            - Frontend: `${{ secrets.DOCKER_USERNAME }}/ifc-openworld-frontend:${{ steps.meta.outputs.sha_short }}`
          draft: false
          prerelease: false

  # Notify deployment (optional: Slack, Discord, etc.)
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()

    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
